generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://postgres:r2F1uxEFM5YF4uiuf5Zx@db.usqmtvptioodqnbokizz.supabase.co:6543/postgres?pgbouncer=true"
}

model fact {
  id                Int               @id @default(autoincrement())
  name              String
  type              String
  negatedFacts      Int[]
  theme             Int?
  display           String?
  theme_factTotheme theme?            @relation(fields: [theme], references: [id])
  factType          factType          @relation(fields: [type], references: [type])
  questionOptions   questionOptions[]
  rule              rule[]
  ruleTests         ruleTests[]
}

model factType {
  type String @id
  seq  Int
  fact fact[]
}

model question {
  id                    Int               @id @default(autoincrement())
  code                  String
  text                  String?
  factSubject           String?
  type                  String
  min                   Int?
  max                   Int?
  theme                 Int?
  theme_questionTotheme theme?            @relation(fields: [theme], references: [id])
  questionType          questionType      @relation(fields: [type], references: [type])
  questionLables        questionLables[]
  questionOptions       questionOptions[]
  rule                  rule[]
}

model questionLables {
  id         Int      @id @default(autoincrement())
  questionId Int
  label      String
  question   question @relation(fields: [questionId], references: [id])
}

model questionOptions {
  id          Int      @id @default(autoincrement())
  questionId  Int
  optionOrder Int
  code        String?
  value       String?
  text        String?
  image       String?
  factId      Int?
  fact        fact?    @relation(fields: [factId], references: [id])
  question    question @relation(fields: [questionId], references: [id])
}

model questionType {
  type     String     @id
  seq      Int
  question question[]
}

model rule {
  id          Int         @id @default(autoincrement())
  code        String?
  triggerType String
  priority    Int?
  factId      Int?
  factAction  String?
  questionId  Int?
  fact        fact?       @relation(fields: [factId], references: [id])
  question    question?   @relation(fields: [questionId], references: [id])
  ruleTrigger ruleTrigger @relation(fields: [triggerType], references: [type])
  ruleTests   ruleTests[]
}

model ruleOperation {
  type      String      @id
  seq       Int
  ruleTests ruleTests[]
}

model ruleTests {
  id            Int           @id @default(autoincrement())
  ruleId        Int
  factId        Int
  operation     String
  parameter     String?
  fact          fact          @relation(fields: [factId], references: [id])
  ruleOperation ruleOperation @relation(fields: [operation], references: [type])
  rule          rule          @relation(fields: [ruleId], references: [id])
}

model ruleTrigger {
  type String @id
  seq  Int
  rule rule[]
}

model theme {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar
  fact     fact[]
  question question[]
}
